NASM provides various define directives for reserving storege space for variable. The define assembler directive is 
used for allocation of storege space. It can be used to reserve as well as initialize one or more bytes.

# Allocating Storage Space for Initialized Data
The syntax for storage allocation statement for initialized data is:
	[variable_name] define_directive initial_value [,initial_valuer]...

Where, variable-name is the indentifier for each storage space. The assembler associates an offset value for each
variable name defined in the data segmnent.
There are five basic forms of the define directive:
	* DB - Define Byte - allocates 1 byte
	* DW - Define Word - allocates 2 bytes
	* DD - Define Doubleword - allocates 4 bytes
	* DQ - Define Quadword - allocates 8 bytes
	* DT - Define Ten Bytes - allocates 10 bytes

Following are some examples of using define directives:
	choice DB "y"
	number DW 12345
	neg_number DW -12345
	big_number DQ 123456789
	real_number_1 DQ 1.234
	real_number_2 DQ 123.456

Please note that:
	* Each byte character is stored as its ASCII value in hexadecimal.
	* Each decimal value is automatically converted to its 16-bit binary equivalent and stored as a hexadecimal number.
	* Processor uses the little-endian byte ordering.
	* Negative numbers are converted to it's 2's complement representation.
	* Sort and long floating-point numbers are represented using 32 or 64 bits, respectively.

# Allocating Storage Space for Uninitialized Data
The reserve directives are used for reserving space for uninitialized data. The reserve directives take a single operand
that specifies the jnumber of units of space to be reserved. Each define directive has a related reserve directive.

There are five basic forms of the reserve directive:
	* RESB - Reserve a Byte
	* RESW - Reserve a Word
	* RESD - Reserve a Doubleword
	* RESQ - Reserve a Quadword
	* REST - Reserve a Ten Bytes

# Multiple Definition
You can have multiple data definition statements in a program. For example:
	* choice DB "y" ; ASCII of y = 79H
	* number1 DW 12345 ; 12345D = 3039H
	* number2 DD 123456789 ; 123456789D = 75BCD15H

The assembler allocates contigyous memory for multiple variable definitions.

# Multiple Initializations
The TIMES directive allows multiple initializations to the same value. For example, an array named marks of size 9 can
be defined and initialized to zero using the following statement:
	marks TIMES 9 DW 0
