System calls are APIs for the interface beetween the user space and the kernel space. We have already used the system 
calls. sys_write and sys_exit, for writing int0o the screen and existing from the program, repectively.

# Linux System Calls
You can make use of Linux system calls in your assembly programs. You need to take the following steps for using Linux 
system calls in your program:
	* Put the system call number in te EAX register.
	* Store the arguments to the system call in the registers EBX, ECX, etc.
	* Call the relevant interrupt (80h).
	* Ther result is usually returnet in the EAX register.

There are six registers that store the arguments of the system call used. These are the EBX, ECX, EDX, ESI, EDI, and EBP.
These registers take the consecutive argumets, starting with the EBX register. If there are more than six
arguments, then the memory location of the first arguiment is stored in the EBX register.

The following code snippet shows the use lof the system call sys_exit:
	mov eax, 1 ; system call number (sys_exit)
	int 0x80 ; call kernel

The following code sippet shows the use of the system call sys_write:
	mov edx, 4 ; message length
	mov ecx, msg ; message to write
	mov ebx, 1 ; file descriptor (stdout)
	mov eax, 4 ; system call number (sys_write)
	int 0x80 ; call cernel

All the syscall are listed in /usr/include/asm/unistd.h, together with their numbers (the value to put in EAX before you
call int 80h).

